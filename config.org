#+TITLE: Emacs configuration
#+STARTUP indent
#+PROPERTY: header-args               :results silent
#+PROPERTY: header-args:emacs-lisp    :tangle yes

* Configuration
** Preamble
Configuration required by the rest of this file

*** don't write-out selected packages
#+begin_src emacs-lisp
  (defun package--save-selected-packages (&rest opt) nil)
#+end_src

*** use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
#+end_src

*** auto-compile
#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+end_src

*** config fns
#+begin_src emacs-lisp
  (use-package dash)

  (defun my-settings/add-hooks (hooks fns)
    "Given a list of HOOKS add FNS to each hook"
    (--each (-table-flat 'cons hooks fns)
      (add-hook (car it) (cdr it))))    
#+end_src

** Environment
*** Encoding
Always use utf-8
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
#+end_src
    
*** Inhibit startup message
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

*** Resize frames to fill available space
Fixes an issue with some GUI environments where emacs resizes
it's frames in increments of font-size leaving gaps when
maximised
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

*** Window history
#+begin_src emacs-lisp
  (when (fboundp 'winner-mode)
    (setq winner-dont-bind-my-keys t)
    (winner-mode 1))
#+end_src

*** TODO Add site-lisp to 'load-path
#+begin_src emacs-lisp
  (setq site-lisp-dir (expand-file-name "site-lisp" user-emacs-directory))

  (add-to-list 'load-path site-lisp-dir)
  (let ((default-directory site-lisp-dir))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

*** Backups / temporary files
#+begin_src emacs-lisp
  ;; ensure backups are still created if vc detected
  (setq vc-make-backup-files t)

  ;; see init.el for backups / autosaves config

  ;; don't write lockfiles
  (setq create-lockfiles nil)
#+end_src

*** Run Emacs server
Run an emacs server if not already started
#+begin_src emacs-lisp
  (unless (and (boundp 'server-process) server-process)
    (server-start))
#+end_src

*** Use same exec-path as shell                                         :Mac:
Use the same exec path as the shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(ns x))
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH"))
#+end_src

*** Use visible bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

*** OSX specific config                                                 :Mac:
#+begin_src emacs-lisp
  (when (memq window-system '(max ns))

    ;; apple uk keyboard places hash as alt+3

    (defun osx--insert-hash ()
      (interactive)
      (insert "#"))

    ;; set a default emoji-font for all frames

    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji")
                                  frame 'prepend)
                (set-fontset-font t 'unicode (font-spec :family "Apple Color Emoji")
                                  frame 'prepend)))

    ;; macos has visual glitches with visible-bell

    (setq visible-bell nil)
    (setq ring-bell-function (lambda ()
                               (invert-face 'mode-line)
                               (run-with-timer 0.1 nil 'invert-face 'mode-line))))
#+end_src

*** Direnv
#+begin_src emacs-lisp
  (use-package direnv
    :if (executable-find "direnv")
    :config
    (direnv-mode))
#+end_src

*** Show number of matches during i-search
#+begin_src emacs-lisp
  (use-package anzu
    :config (global-anzu-mode +1))
#+end_src

*** Pop `shell` into current window
#+begin_src emacs-lisp
  (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)
#+end_src

*** Disable disabled functions
#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

** Theme
*** Frame decoration / behaviour

**** Hide window decorations
#+begin_src emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

**** Frame settings
#+begin_src emacs-lisp
  (setq default-frame-alist '((vertical-scroll-bars . nil)
                              (left-fringe . 10)
                              (right-fringe . 10)))

  (setq initial-frame-alist default-frame-alist)
#+end_src

*** [[https://github.com/cpaulik/emacs-material-theme][Material theme]]
#+begin_src emacs-lisp
  (setq themes-dir (expand-file-name "themes"  user-emacs-directory))

  (add-to-list 'custom-theme-load-path themes-dir)
  (load-theme 'material t)
#+end_src

*** Header / Mode line (based on [[https://github.com/rougier/elegant-emacs][elegant-emacs]])
#+begin_src emacs-lisp
  ;; header-line config

  (use-package all-the-icons
    :ensure t)

  (set-frame-parameter (selected-frame)
                       'internal-border-width 8)


  (defun my-settings/mode-line-render (left right)
    (let* ((available-width (- (window-width) (length left))))
      (format (format "%%s %%%ds" available-width) left right)))

  (defun my-settings/mode-line-separate (FORMS)
    (--map
     `(:eval (if ,it (concat ,it " ")))
     FORMS))

  (defun my-settings/mode-line-mode-icon ()
    (let ((icon (all-the-icons-icon-for-mode major-mode)))
      (unless (symbolp icon)
        (propertize icon
                    'face `(:family ,(all-the-icons-icon-family-for-mode major-mode) :inherit)
                    'display '(raise 0)))))

  (defun my-settings/mode-line-modified ()
    (let* ((icons-alist
            '(("*" all-the-icons-faicon-family all-the-icons-faicon "chain-broken" :height 1.2 :v-adjust -0.0)
              ;; ("-" all-the-icons-faicon-family all-the-icons-faicon "link" :height 1.2 :v-adjust -0.0)
              ("%" all-the-icons-faicon-family all-the-icons-faicon "lock" :height 1.2 :v-adjust -0.0)))
           (result (cdr (assoc (format-mode-line "%*") icons-alist))))
      (if result
          (propertize (apply (cadr result) (cddr result))
                      'face `(:family ,(funcall (car result))))
        " ")))

  (setq-default header-line-format
                `((:eval
                   (my-settings/mode-line-render
                    (format-mode-line
                     '(" "
                       "%e"
                       ,(my-settings/mode-line-separate
                         '((my-settings/mode-line-mode-icon)))
                       "%b "))

                    (format-mode-line
                     '((:eval (my-settings/mode-line-modified))
                       " "
                       "%4l:%2c"))))))

  (defun my-settings/optional-mode-line (format)
    (let ((rendered (format-mode-line format)))
      (if (or (string-blank-p rendered))
          (s-equals-p "" rendered)
        nil
        format)))

  (setq-default mode-line-format nil)

  (setq x-underline-at-descent-line t)

  (set-face-attribute 'header-line nil
                      :underline t
                      :overline nil
                      :weight 'regular
                      :foreground 'unspecified
                      :box `(:line-width 4 :color ,(frame-parameter nil 'background-color))
                      :inherit 'mode-line)

  (set-face-attribute 'mode-line nil
                      :background (frame-parameter nil 'background-color)
                      :overline t)

  (set-face-attribute 'mode-line-inactive nil
                      :background (face-attribute 'mode-line :background))
#+end_src

*** Mac options                                                         :Mac:
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (setq ns-use-proxy-icon nil)
    (setq frame-title-format nil)
    (set-frame-name nil)
    (set-frame-font "Hack 12" nil t))
#+end_src

** Emacs tools / utilities
*** Elisp Libraries
**** dash
Composable list api, already loaded in order to execute this file

**** request
Handy http lib
#+begin_src emacs-lisp
  (use-package request)
#+end_src

**** TODO Hydra
Modal-style fn / key-bind maps
#+begin_src emacs-lisp
  (use-package  hydra)
#+end_src

*** Auto-completion
Use company for global auto-completion.
#+begin_src emacs-lisp
  (use-package company
    :demand
    :config (progn
              (setq company-dabbrev-downcase nil)
              (global-company-mode)))
#+end_src

*** Editing
**** tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

**** .editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config (editorconfig-mode 1)
    :demand)
#+end_src
**** highlight matching delimiters
Highlight matching delimiters =(=, =[=, ={= etc. by colour and show the
current matching delimiter explicitly.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
  (show-paren-mode)
#+end_src

**** expand region
(Modally) Expand region selection by semantic boundaries
#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("C-=" . er/expand-region)))
#+end_src
     
**** show possible keys
After a prefix is pressed show what possible further key
combinations are available
#+begin_src emacs-lisp
  (use-package which-key)
#+end_src

**** use prelude move to beginning of line
Copied from [[https://github.com/bbatsov/prelude][Emacs Prelude]], toggles between moving to line
beginning and first non-whitespace character
#+begin_src emacs-lisp
  (require 'prelude-move-beginning-of-line)
  (global-set-key [remap move-beginning-of-line]
                  'prelude-move-beginning-of-line)
#+end_src

**** move lines
Transpose the current line or region up or down
#+begin_src emacs-lisp
  (require 'move-lines)
  (move-lines-binding)
#+end_src

**** window selection
#+begin_src emacs-lisp
  (use-package windmove-hydra
    :after hydra
    :load-path "site-lisp")
#+end_src

*** Dired
**** Omit files
Omit '=.=', '=..=', auto-save, lock and temporary files when hiding in dired
#+begin_src emacs-lisp
  (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^#.*#$")
#+end_src

**** Prevent clash with C-o
#+begin_src emacs-lisp
  (eval-after-load "dired"
    '(progn
       (define-key dired-mode-map "\C-o" nil)))
#+end_src

*** Buffer naming
Change the default behaviour of appending '<2>' etc. to duplicate
buffer names to instead derive a new name by expanding the file path
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src

*** Helm
A generic fuzzy-matching interface to lots of sources. Can select
from buffers, fns, tags, regexp matches etc. etc.
#+begin_src emacs-lisp
  (use-package helm
    :bind (("M-x"     . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x C-p" . helm-browse-project)
           ("C-x b"   . helm-buffers-list)
           ("C-x C-b" . helm-buffers-list))
    :config (progn
              (helm-mode t))
    :demand)

  ;; Extend helm project search to understand git
  (use-package helm-ls-git
    :after helm)

  ;; Silver searcher search
  (use-package helm-ag
    :bind (("C-S-s" . helm-ag-project-root)))
#+end_src

*** Ediff
Use single-frame setup and restore previous window configuration on quit
#+begin_src emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  (defvar my-ediff-last-windows nil)

  (defun my-store-pre-ediff-winconfig ()
    (setq my-ediff-last-windows (current-window-configuration)))

  (defun my-restore-pre-ediff-winconfig ()
    (set-window-configuration my-ediff-last-windows))

  (add-hook 'ediff-before-setup-hook #'my-store-pre-ediff-winconfig)
  (add-hook 'ediff-quit-hook #'my-restore-pre-ediff-winconfig)
#+end_src

*** Eww
**** Title advice
Use url as buffer name if page doesn't provide a title
#+begin_src emacs-lisp
  (defadvice eww-render (after set-eww-buffer-name activate)
    (rename-buffer (concat "*eww-" (or eww-current-title
                                       (if (string-match "://" eww-current-url)
                                           (substring eww-current-url (match-beginning 0))
                                         eww-current-url))
                           "*") t))
#+end_src

*** Treemacs
#+begin_src emacs-lisp :exports nil
  (use-package treemacs
    :config
    (treemacs-resize-icons 44))

  (use-package treemacs-magit
    :after treemacs magit)
#+end_src

** Org
*** Global key bindings
#+begin_src emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-switchb)
  (global-set-key "\C-cc" 'org-capture)
#+end_src

*** Settings
#+begin_src emacs-lisp
  (defun my-settings/org-file (name)
    "Resolve the location of org file NAME"
    (let ((org-dir (expand-file-name "~/org")))
      (expand-file-name name org-dir)))

  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

  (let ((todo  (my-settings/org-file "todo.org"))
        (done   (my-settings/org-file "done.org")))
    (setq org-agenda-files (list todo))
    (setq org-default-notes-file nil)
    (setq org-completion-use-ido nil)
    (setq org-log-done nil)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets `((,done  :maxlevel . 1)))
    (setq org-refile-use-outline-path t)
    (setq org-outline-path-complete-in-steps nil)
    ;; (setq org-capture-templates (list
    ;;                              `("i" "Idea for later review" entry (file ,inbox) "* %?")
    ;;                              `("a" "A new action" entry (file+headline ,active "Actions") "* %? %^g")
    ;;                              `("p" "A new project" entry (file+headline ,active "Projects") "* %?")))
    (setq org-export-with-toc nil)
    (setq org-export-backends '(ascii html icalendar latex md odt))

    ;; export github-flavoured markdown
    (use-package ox-gfm
      :config (add-to-list 'org-export-backends 'gfm)))
#+end_src

*** Dired links
Create org links to dired directories
#+begin_src emacs-lisp
  (require 'org-dired-link)
#+end_src

*** Babel
#+begin_src emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (emacs-lisp . t)
     (shell . t)))

  (setq org-confirm-babel-evaluate (lambda (lang body)
                                     (cond ((string= lang "dot") nil)
                                           ((string= lang "verb") nil)
                                           (t t))))

  (add-hook 'org-babel-after-execute-hook (lambda ()
                                            (when org-inline-image-overlays
                                              (org-redisplay-inline-images))))

#+end_src

** Verb
#+begin_src emacs-lisp
  (use-package verb
    :after org
    :config
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
    (setq verb-auto-kill-response-buffers t)
    (append org-babel-load-languages
            '((verb . t))))

#+end_src

** Magit
Effective UI for git commit and history manipulation.
#+begin_src emacs-lisp
  (use-package git-commit)
  (use-package orgit)
  (use-package magit
    :commands magit-status
    :config (add-to-list 'same-window-regexps "magit: .*"))
#+end_src

** Languages / Smaller Tools
*** Generic
**** Eglot mode
#+begin_src emacs-lisp
  (use-package project :ensure t)
  (use-package flycheck :pin melpa)
  (use-package eglot :pin melpa)
#+end_src

*** Lisp

**** Paredit
Semantic lisp editing and manipulation
#+begin_src emacs-lisp
  (use-package paredit)
#+end_src

**** Common lisp mode hooks
#+begin_src emacs-lisp
  (defun my-settings/add-lisp-hooks (hooks)
    "Add common lisp mode fns to HOOKS"
    (my-settings/add-hooks hooks
                           '(paredit-mode
                             rainbow-delimiters-mode
                             eldoc-mode)))
#+end_src     

**** Emacs lisp
#+begin_src emacs-lisp
  (my-settings/add-lisp-hooks
   '(emacs-lisp-mode-hook))
#+end_src

**** Clojure

***** clojure-mode
#+begin_src emacs-lisp
  (use-package clojure-mode
    :mode (("\\(?:build\\|profile\\)\\.boot\\'" . clojure-mode)
           ("\\.cljs\\'" . clojurescript-mode)
           ("\\.cljx\\'" . clojurex-mode)
           ("\\.cljc\\'" . clojurec-mode)
           ("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode))
    :config (my-settings/add-lisp-hooks
             '(clojure-mode-hook
               clojurescript-mode-hook)))
#+end_src

***** cider
Emacs ide for clojure development, see it's [[https://github.com/clojure-emacs/cider][github page]] for more
info
#+begin_src emacs-lisp
  (use-package cider
    :after clojure-mode
    :config (progn
              (setq nrepl-hide-special-buffers t)
              (setq cider-repl-pop-to-buffer-on-connect nil)
              (setq cider-show-error-buffer nil)
              (setq cider-repl-use-pretty-printing t)

              (my-settings/add-lisp-hooks
               '(cider-mode-hook
                 cider-repl-mode-hook))

              (cider-register-cljs-repl-type 'nbb "(+ 1 2 3)")

              (defun mm/cider-connected-hook ()
                (when (eq 'nbb cider-cljs-repl-type)
                  (setq-local cider-show-error-buffer nil)
                  (cider-set-repl-type 'cljs)))

              (add-hook 'cider-connected-hook #'mm/cider-connected-hook)))

#+end_src

*** Go
Requires some additional tools:
- golang.org/x/tools/cmd/goimports
- github.com/rogpeppe/godef
- github.com/stamblerre/gocode
- golang.org/x/tools/cmd/guru

  #+begin_src emacs-lisp
    (use-package flycheck-golangci-lint
      :ensure t
      :hook (go-mode . flycheck-golangci-lint-setup))

    (use-package go-mode
      :mode "\\.go\\'"
      :hook ((go-mode . flycheck-mode)
             (go-mode . eglot-ensure))
      :config
      (defun my-go-mode-before-save-hook ()
        (when (eq major-mode 'go-mode)
          (eglot-format)))

      (add-hook 'before-save-hook #'my-go-mode-before-save-hook))
  #+end_src

*** Ruby
#+begin_src emacs-lisp
  (use-package ruby-mode
    :mode "\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'"
    :hook (ruby-mode . flycheck-mode)
    :config
    (setq ruby-insert-encoding-magic-comment nil)
    (defun custom-bundle-exec-flycheck-command-wrapper-function (command)
      (let ((executable (car command))
            (args (cdr command)))
        (if (string-match-p "rubocop$" executable)
            (append '("bundle" "exec" "rubocop") args)
          command)))
    (setq flycheck-command-wrapper-function 'custom-bundle-exec-flycheck-command-wrapper-function))

  (use-package robe
    :after (ruby-mode inf-ruby)
    :hook (ruby-mode . robe-mode))
#+end_src

*** Data formats / Markup Languages
**** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("\\.md\\'" . markdown-mode)
           ("\\.text\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+end_src

**** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode "\\.e?ya?ml$")
#+end_src

**** xml
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.xml\\'"  . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.xslt\\'" . nxml-mode))

  (add-to-list 'hs-special-modes-alist
               '(nxml-mode
                 "<!--\\|<[^/>]*[^/]>"
                 "-->\\|</[^/>]*[^/]>"

                 "<!--"
                 sgml-skip-tag-forward
                 nil))
  (add-hook 'nxml-mode-hook 'hs-minor-mode)
  (eval-after-load 'nxml-mode
    '(define-key nxml-mode-map (kbd "C-c h") 'hs-toggle-hiding))
#+end_src
     
**** json
#+begin_src emacs-lisp
  (use-package json-mode
    :mode (("\\.jsonld$" . json-mode)
           ("\\.json$" . json-mode)))

  (use-package jq-mode)
#+end_src

*** js
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts$"
    :hook ((typescript-mode . flycheck-mode)
           (typescript-mode . eglot-ensure)))

  (use-package grunt
    :init (setq grunt-base-command "./node_modules/.bin/grunt")
    :commands (grunt-exec))

  (setq js-indent-level 2)
#+end_src
     
*** java
#+begin_src emacs-lisp
  (use-package log4j-mode
    :mode "\\.log\\'")
  (add-hook 'java-mode 'eglot-ensure)
#+end_src

*** CSharp
Configured to use [[https://github.com/OmniSharp/omnisharp-roslyn][Omnisharp server]] for providing ide features

[[https://github.com/OmniSharp/omnisharp-emacs][omnisharp-emacs]] plugs into flycheck, eldoc and company and
provides access to refactoring fns.

Also using my own [[*Hydra][Hydra]] as a menu for the non-automatic features.
#+begin_src emacs-lisp
  (use-package flycheck :pin melpa)

  (use-package csharp-mode
    :mode "\\.cs$"
    :functions hydra-csharp-menu/body
    :bind (:map csharp-mode-map
                ("C-c C-c" . hydra-csharp-menu/body))
    :config (progn
              (add-to-list 'load-path (expand-file-name "vendored/omnisharp-emacs" site-lisp-dir))
              (require 'omnisharp)

              (defhydra hydra-csharp-menu (:color blue)
                "CSharp Editing Action:\n"
                ("r" omnisharp-rename-interactively "rename")
                ("R" omnisharp-run-code-action-refactoring "refactor")
                ("f" omnisharp-helm-find-symbols "find symbol")
                ("u" omnisharp-helm-find-usages "find usages")
                ("F" omnisharp-fix-usings "fix usings"))

              (eval-after-load 'company
                '(add-to-list 'company-backends 'company-omnisharp))

              (my-settings/add-hooks
               '(csharp-mode-hook)
               '(omnisharp-mode
                 flycheck-mode
                 eldoc-mode
                 rainbow-delimiters-mode))))
#+end_src

*** Rust
#+begin_src emacs-lisp
  (use-package cargo :pin melpa)
  (use-package rust-mode :pin melpa
    :after (cargo)
    :hook (eglot-ensure)
    :config (setq rust-format-on-save t))
#+end_src

*** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode "Dockerfile\\'")

  (use-package docker-compose-mode
    :mode "docker-compose[^/]*\\.yml\\'")
#+end_src

*** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode
    :mode "\\.tf$")

  (use-package company-terraform
    :config (progn
              (company-terraform-init)))
#+end_src

** Epilogue
Actions which need to be taken after other config

*** Desktop
Remember what I've been doing between sessions
#+begin_src emacs-lisp
  (desktop-save-mode)
  (desktop-read)
#+end_src

