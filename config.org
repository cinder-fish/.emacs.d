#+TITLE: Emacs configuration
#+PROPERTY: header-args               :results silent
#+PROPERTY: header-args:emacs-lisp    :tangle yes

* Configuration
** Preamble
   Configuration required by the rest of this file

*** don't write-out selected packages
    #+BEGIN_SRC emacs-lisp
      (defun package--save-selected-packages (&rest opt) nil)
    #+END_SRC

*** use-package
    #+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
    #+END_SRC

*** auto-compile
    #+BEGIN_SRC emacs-lisp
  (use-package auto-compile
               :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
    #+END_SRC

*** config fns
    #+BEGIN_SRC emacs-lisp
      (use-package dash)

      (defun my-settings/add-hooks (hooks fns)
        "Given a list of HOOKS add FNS to each hook"
        (--each (-table-flat 'cons hooks fns)
          (add-hook (car it) (cdr it))))    
    #+END_SRC

** Environment
*** Encoding
    Always use utf-8
    #+BEGIN_SRC emacs-lisp
      (prefer-coding-system 'utf-8)
      (setq default-buffer-file-coding-system 'utf-8)
    #+end_src
    
*** Inhibit startup message
    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t)
    #+END_SRC
    
*** GC Threshold
    Allow higher memory usage
    #+BEGIN_SRC emacs-lisp
      (setq gc-cons-threshold 20000000)
    #+END_SRC

*** Frame decoration / behaviour
**** Hide window decorations
     #+BEGIN_SRC emacs-lisp
      (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
      (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
      (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     #+END_SRC

**** Use visible bell
     #+BEGIN_SRC emacs-lisp
      (setq visible-bell t)
     #+END_SRC

**** Resize frames to fill available space
     Fixes an issue with some GUI environments where emacs resizes
     it's frames in increments of font-size leaving gaps when
     maximised
     #+BEGIN_SRC emacs-lisp
      (setq frame-resize-pixelwise t)
     #+END_SRC

**** Fringes
     #+BEGIN_SRC emacs-lisp
    (fringe-mode 10)
     #+END_SRC

*** TODO Add site-lisp to 'load-path
    #+BEGIN_SRC emacs-lisp
      (setq site-lisp-dir (expand-file-name "site-lisp" user-emacs-directory))

      (add-to-list 'load-path site-lisp-dir)
      (let ((default-directory site-lisp-dir))
        (normal-top-level-add-subdirs-to-load-path))
    #+END_SRC

*** TODO vc make backups
    #+BEGIN_SRC emacs-lisp
    (setq vc-make-backup-files t)
    #+END_SRC

*** Run Emacs server
    Run an emacs server if not already started
    #+BEGIN_SRC emacs-lisp
  (unless (boundp 'server-process)
    (server-start))
    #+END_SRC
    
*** Use same exec-path as shell
    On Mac use the same exec path as the shell
    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :if (memq window-system '(max ns))
        :config (exec-path-from-shell-initialize))
    #+END_SRC
    
*** Show number of matches during i-search
    #+BEGIN_SRC emacs-lisp
      (use-package anzu
        :config (global-anzu-mode +1))
    #+END_SRC
*** Pop `shell` into current window
    #+BEGIN_SRC emacs-lisp
      (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)
    #+END_SRC
*** Disable disabled functions
    #+BEGIN_SRC emacs-lisp
      (setq disabled-command-function nil)
    #+END_SRC
** Theme
*** [[https://github.com/cpaulik/emacs-material-theme][Material theme]]
    #+BEGIN_SRC emacs-lisp
      (setq themes-dir (expand-file-name "themes"  user-emacs-directory))

      (add-to-list 'custom-theme-load-path themes-dir)
      (load-theme 'material t)
    #+END_SRC

** Emacs tools / utilities
*** Elisp Libraries
**** dash
     Modern composable list api, it's actually already loaded in order
     to execute this file

**** request
     Handy http lib
     #+BEGIN_SRC emacs-lisp
(use-package request)
     #+END_SRC

**** TODO Hydra
     Modal-style fn / key-bind maps
     #+BEGIN_SRC emacs-lisp
   (use-package  hydra)
     #+END_SRC

*** Auto-completion
    Use company for global auto-completion.
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:demand
	:config (progn
		  (setq company-dabbrev-downcase nil)
		  (global-company-mode)))
    #+END_SRC

*** Editing
**** tabs
     no thank you.
     #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
     #+END_SRC

**** highlight matching delimiters
     Highlight matching delimiters =(=, =[=, ={= etc. by colour and show the
     current matching delimiter explicitly.
     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters)
       (show-paren-mode)
     #+END_SRC

**** multiple cursors
     Have multiple editing cursors at once
     #+BEGIN_SRC emacs-lisp
       (use-package multiple-cursors
         :commands (mc/edit-beginnings-of-lines mc/edit-ends-of-lines mc/edit-lines)
         :functions hydra-multiple-cursors-menu/body
         :init (progn
                 (defhydra hydra-multiple-cursors-menu (:color blue)
                   "multiple-cursors"
                   ("a" mc/edit-beginnings-of-lines "edit beginnings")
                   ("e" mc/edit-ends-of-lines "edit ends")
                   ("c" mc/edit-lines "edit column")))
         :bind ("C-c m" . hydra-multiple-cursors-menu/body))
     #+END_SRC

**** expand region
     (Modally) Expand a region selection by the next-most semantic boundary
     #+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-=" . er/expand-region)))
     #+END_SRC
     
**** show possible keys
     After a prefix is pressed show what possible further key
     combinations are available
     #+BEGIN_SRC emacs-lisp
       (use-package which-key)
     #+END_SRC

**** use prelude move to beginning of line
     Copied from [[https://github.com/bbatsov/prelude][Emacs Prelude]], toggles between moving to line
     beginning and first non-whitespace character
     #+BEGIN_SRC emacs-lisp
(require 'prelude-move-beginning-of-line)
(global-set-key [remap move-beginning-of-line]
                'prelude-move-beginning-of-line)     
     #+END_SRC

**** move lines
     Transpose the current line or region up or down
     #+BEGIN_SRC emacs-lisp
(require 'move-lines)
(move-lines-binding)
     #+END_SRC

**** editor config
    #+BEGIN_SRC emacs-lisp
      (use-package editorconfig
        :demand)
    #+END_SRC

*** Dired
**** Dired+    
     Extension fns for dired
     #+BEGIN_SRC emacs-lisp
    (require 'dired+)
     #+END_SRC

**** Omit files
     Omit '=.=', '=..=', auto-save, lock and temporary files when hiding in dired
     #+BEGIN_SRC emacs-lisp
       (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^#.*#$")
     #+END_SRC
     
*** Minibuffer selections
    Use fuzzy matching when making selections in the mini buffer
    #+BEGIN_SRC emacs-lisp
  (use-package ido-ubiquitous)
  (use-package flx-ido
    :config (progn
              (ido-mode 1)
              (ido-everywhere 1)
              (flx-ido-mode 1)
              (setq ido-use-faces nil)))
    #+END_SRC

*** Buffer naming
    Change the default behaviour of appending '<2>' etc. to duplicate
    buffer names to instead derive a new name by expanding the file path
    #+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
    #+END_SRC

*** Mode-line
    Use a neater, more compact mode-line
    #+BEGIN_SRC emacs-lisp
      (use-package smart-mode-line
        :config (progn
                  (setq display-time-default-load-average nil)
                  (display-time-mode 1)

                  (column-number-mode 1)

                  (setq sml/name-width (quote (10 . 44)))
                  (setq sml/shorten-directory t)
                  (setq sml/replacer-regexp-list '())
                  (setq sml/shorten-modes t)

                  (setq sml/theme (quote respectful))

                  (setq rm-blacklist nil)
                  (let* ((whitelisted-modes '("Ovwrt"))
                         (combined-regexp   (mapconcat 'identity whitelisted-modes "\\|")))
                    (setq rm-whitelist combined-regexp))
                  (setq rm-text-properties '(("\\` Ovwrt\\'" 'face 'font-lock-warning-face)))

                  (setq mode-line-format
                        (quote
                         ("%e" ;; print error message about full memory
                          mode-line-front-space
                          sml/pos-id-separator
                          ""
                          mode-line-position
                          ""
                          mode-line-mule-info
                          mode-line-client
                          mode-line-modified
                          mode-line-remote
                          mode-line-frame-identification
                          " "
                          mode-line-buffer-identification
                          ""
                          (vc-mode vc-mode)
                          sml/pre-modes-separator
                          mode-line-modes
                          mode-line-misc-info
                          mode-line-end-spaces)))
                  (sml/setup)))
    #+END_SRC

*** Helm
    A generic fuzzy-matching interface to lots of sources. Can select
    from buffers, fns, tags, regexp matches etc. etc.
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :bind (("M-x"     . helm-M-x)
               ("C-x C-f" . helm-find-files)
               ("C-x C-p" . helm-browse-project)
               ("C-x b"   . helm-buffers-list))
        :config (progn
                  (helm-mode t))
        :demand)

      ;; Extend helm project search to understand git
      (use-package helm-ls-git
        :after helm)

      ;; Silver searcher search
      (use-package helm-ag
        :bind (("C-S-s" . helm-ag-project-root)))
    #+END_SRC

*** Ediff
    Use single-frame setup and restore previous window configuration on quit
     #+BEGIN_SRC emacs-lisp
       (setq ediff-window-setup-function 'ediff-setup-windows-plain)

       (defvar my-ediff-last-windows nil)

       (defun my-store-pre-ediff-winconfig ()
         (setq my-ediff-last-windows (current-window-configuration)))

       (defun my-restore-pre-ediff-winconfig ()
         (set-window-configuration my-ediff-last-windows))

       (add-hook 'ediff-before-setup-hook #'my-store-pre-ediff-winconfig)
       (add-hook 'ediff-quit-hook #'my-restore-pre-ediff-winconfig)
     #+END_SRC
*** Eww
**** Title advice
     Use url as buffer name if page doesn't provide a title
     #+BEGIN_SRC emacs-lisp
       (defadvice eww-render (after set-eww-buffer-name activate)
         (rename-buffer (concat "*eww-" (or eww-current-title
                                            (if (string-match "://" eww-current-url)
                                                (substring eww-current-url (match-beginning 0))
                                              eww-current-url))
                                "*") t))
     #+END_SRC
** Restclient
*** Mode
    #+BEGIN_SRC emacs-lisp
      (require 'restclient (expand-file-name "vendored/restclient.el/restclient.el" site-lisp-dir))
    #+END_SRC
** Org
*** Global key bindings
    #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
     (global-set-key "\C-cc" 'org-capture)
    #+END_SRC

*** Settings
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)))

      (defun my-settings/gtd-file (name)
        "Resolve the location of gtd org file NAME"
        (let ((gtd-dir (expand-file-name "gtd" user-emacs-directory)))
          (expand-file-name name gtd-dir)))

      (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

      (let ((active  (my-settings/gtd-file "active.org"))
            (inbox   (my-settings/gtd-file "inbox.org"))
            (someday (my-settings/gtd-file "someday.org")))
        (setq org-agenda-files (list active))
        (setq org-default-notes-file nil)
        (setq org-completion-use-ido nil)
        (setq org-log-done nil)
        (setq org-outline-path-complete-in-steps nil)
        (setq org-refile-targets `((,active  :regexp . "Actions")
                                   (,active  :regexp . "Projects")
                                   (,active  :regexp . "Done")
                                   (,someday :maxlevel . 9)))
        (setq org-refile-use-outline-path t)
        (setq org-outline-path-complete-in-steps nil)
        (setq org-capture-templates (list
                                   `("i" "Idea for later review" entry (file ,inbox) "* %?")
                                   `("a" "A new action" entry (file+headline ,active "Actions") "* %? %^g")
                                   `("p" "A new project" entry (file+headline ,active "Projects") "* %?")))
        (setq org-export-with-toc nil)
        (setq org-export-backends '(ascii html icalendar latex md odt)))
    #+END_SRC

*** Dired links
    Create org links to dired directories
    #+BEGIN_SRC emacs-lisp
    (require 'org-dired-link)
    #+END_SRC

*** Org-Trello
    Download/Upload trello boards as org files
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode))
      (use-package org-trello
        :mode "\\.trello$"
	:config (setq org-trello-current-prefix-keybinding "C-c o"))
    #+END_SRC

** Magit
   Effective and very complete UI for git commit and history
   manipulation. Always my go-to for interacting with git
   #+BEGIN_SRC emacs-lisp
     (use-package git-commit)
     (use-package orgit)
     (use-package magit
       :commands magit-status)
   #+END_SRC

** Languages / Smaller Tools
*** Lisp

**** Paredit
     Delightful semantic lisp editing and manipulation
     #+BEGIN_SRC emacs-lisp
     (use-package paredit)
     #+END_SRC

**** Common hooks
     I like to have a common editing experience across lisp modes, so
     here I declare a utility fn for setting up mode hooks
     #+BEGIN_SRC emacs-lisp
       (defun my-settings/add-lisp-hooks (hooks)
         "Add common lisp mode fns to HOOKS"
         (my-settings/add-hooks hooks
                                '(paredit-mode
                                  rainbow-delimiters-mode
                                  eldoc-mode)))
     #+END_SRC     

**** Emacs lisp
     #+BEGIN_SRC emacs-lisp
       (my-settings/add-lisp-hooks
        '(emacs-lisp-mode-hook))
     #+END_SRC

**** Clojure

***** clojure-mode
      #+BEGIN_SRC emacs-lisp
        (use-package clojure-mode
          :mode (("\\(?:build\\|profile\\)\\.boot\\'" . clojure-mode)
                 ("\\.cljs\\'" . clojurescript-mode)
                 ("\\.cljx\\'" . clojurex-mode)
                 ("\\.cljc\\'" . clojurec-mode)
                 ("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode))
          :config (my-settings/add-lisp-hooks
                   '(clojure-mode-hook
                     clojurescript-mode-hook)))
      #+END_SRC

***** cider
      Emacs ide for clojure development, see it's [[https://github.com/clojure-emacs/cider][github page]] for more
      info
      #+BEGIN_SRC emacs-lisp
        (use-package cider
          :after clojure-mode
          :config (progn
                    (setq nrepl-hide-special-buffers t)
                    (setq cider-repl-pop-to-buffer-on-connect nil)
                    (setq cider-show-error-buffer nil)
                    (setq cider-repl-use-pretty-printing t)

                    (my-settings/add-lisp-hooks
                     '(cider-mode-hook
                       cider-repl-mode-hook))))

      #+END_SRC

***** clj-refactor
      Refactoring fns for clojure, requires nrepl middleware to fully
      function.
      #+BEGIN_SRC emacs-lisp
        (use-package clj-refactor
          :bind (:map clojure-mode-map
                 ("C-c C-m" . hydra-cljr-help-menu/body)
                 :map clojurescript-mode-map
                 ("C-c C-m" . hydra-cljr-help-menu/body))
          :config (progn
                    (setq cljr-warn-on-eval nil)

                    (my-settings/add-hooks
                     '(clojure-mode-hook
                       clojurescript-mode-hook)
                     '((lambda () (yas-minor-mode 1))))))
      #+END_SRC

*** Haskell
    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :mode (("\\.hsc\\'" . haskell-mode)
               ("\\.l[gh]s\\'" . literate-haskell-mode)
               ("\\.[gh]s\\'" . haskell-mode)
               ("\\.cabal\\'" . haskell-cabal-mode)
               ("\\.chs\\'" . haskell-c2hs-mode)
               ("\\.ghci\\'" . ghci-script-mode)
               ("\\.dump-simpl\\'" . ghc-core-mode)
               ("\\.hcr\\'" . ghc-core-mode)))
    #+END_SRC

*** Go
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :mode "\\.go\\'")
    #+END_SRC

*** Ruby
    #+BEGIN_SRC emacs-lisp
      (use-package ruby-mode
        :mode "\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'")
    #+END_SRC

*** Markup Languages
**** markdown
     #+BEGIN_SRC emacs-lisp
       (use-package markdown-mode
         :mode (("\\.md\\'" . markdown-mode)
                ("\\.text\\'" . markdown-mode)
                ("\\.markdown\\'" . markdown-mode)))
     #+END_SRC

**** yaml
     #+BEGIN_SRC emacs-lisp
       (use-package yaml-mode
         :mode "\\.e?ya?ml$")
     #+END_SRC

**** xml
     Use nxml-mode for xml files
     #+BEGIN_SRC emacs-lisp
       (add-to-list 'auto-mode-alist '("\\.xml\\'"  . nxml-mode))
       (add-to-list 'auto-mode-alist '("\\.xslt\\'" . nxml-mode))

       (add-to-list 'hs-special-modes-alist
                    '(nxml-mode
                      "<!--\\|<[^/>]*[^/]>"
                      "-->\\|</[^/>]*[^/]>"

                      "<!--"
                      sgml-skip-tag-forward
                      nil))
       (add-hook 'nxml-mode-hook 'hs-minor-mode)
       (eval-after-load 'nxml-mode
         '(define-key nxml-mode-map (kbd "C-c h") 'hs-toggle-hiding))
     #+END_SRC
     
**** json
     #+BEGIN_SRC emacs-lisp
       (use-package json-mode
         :mode (("\\.jsonld$" . json-mode)
                ("\\.json$" . json-mode)))

       (use-package jq-mode)
     #+END_SRC
     
*** java
    #+BEGIN_SRC emacs-lisp
          (use-package log4j-mode
            :mode "\\.log\\'")
    #+END_SRC

*** CSharp
    Configured to use [[https://github.com/OmniSharp/omnisharp-roslyn][Omnisharp server]] for providing ide features

    [[https://github.com/OmniSharp/omnisharp-emacs][omnisharp-emacs]] plugs into flycheck, eldoc and company and
    provides access to refactoring fns.

    Also using my own [[*Hydra][Hydra]] as a menu for the non-automatic features.
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck)

      (use-package csharp-mode
        :mode "\\.cs$"
        :functions hydra-csharp-menu/body
        :bind (:map csharp-mode-map
                    ("C-c C-c" . hydra-csharp-menu/body))
        :config (progn
                  (add-to-list 'load-path (expand-file-name "vendored/omnisharp-emacs" site-lisp-dir))
                  (require 'omnisharp)

                  (defhydra hydra-csharp-menu (:color blue)
                    "CSharp Editing Action:\n"
                    ("r" omnisharp-rename-interactively "rename")
                    ("R" omnisharp-run-code-action-refactoring "refactor")
                    ("f" omnisharp-helm-find-symbols "find symbol")
                    ("u" omnisharp-helm-find-usages "find usages")
                    ("F" omnisharp-fix-usings "fix usings"))

                  (eval-after-load 'company
                    '(add-to-list 'company-backends 'company-omnisharp))

                  (my-settings/add-hooks
                   '(csharp-mode-hook)
                   '(omnisharp-mode
                     flycheck-mode
                     eldoc-mode
                     rainbow-delimiters-mode))))
    #+END_SRC

*** Terraform
    #+BEGIN_SRC emacs-lisp
          (use-package terraform-mode
            :mode "\\.tf$")

          (use-package company-terraform
            :config (progn
                      (company-terraform-init)))
    #+END_SRC

*** Kubernetes
    #+BEGIN_SRC emacs-lisp
      (use-package kubernetes
        :commands (kubernetes-overview))
    #+END_SRC
** OSX
   Some specific configuration when running on OSX

    #+BEGIN_SRC emacs-lisp
      (when (memq window-system '(max ns))

        ;; apple uk keyboard places hash as alt+3

        (defun osx--insert-hash ()
          (interactive)
          (insert "#"))

        ;; switch to editing files in intellij

        (defun osx--open-in-intellij ()
          (interactive)
          (progn
            (shell-command
             (format "idea --line %d %s"
                     (line-number-at-pos)
                     (buffer-file-name)))
            (start-process-shell-command "Switch to IntelliJ" nil
                                         "osascript -e 'activate application \"IntelliJ IDEA\"'")))

        (global-set-key (kbd "s-O") 'osx--open-in-intellij)

        ;; set a default emoji-font for all frames

        (add-hook 'after-make-frame-functions
                  (lambda (frame)
                    (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji")
                                      frame 'prepend)))

        ;; macos has visual glitches with visible-bell

        (setq visible-bell nil)
        (setq ring-bell-function (lambda ()
                                   (invert-face 'mode-line)
                                   (run-with-timer 0.1 nil 'invert-face 'mode-line))))
    #+END_SRC

   
** Epilogue
   Actions which need to be taken after other config

*** Desktop
    Remember what I've been doing between sessions
    #+BEGIN_SRC emacs-lisp
      (desktop-save-mode)
      (desktop-read)
    #+END_SRC
